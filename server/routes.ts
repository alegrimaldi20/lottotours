import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { db } from "./db";
import Stripe from "stripe";
import { 
  insertUserSchema, 
  insertLotteryTicketSchema
} from "@shared/schema";
import { z } from "zod";

// Initialize Stripe if valid key is available
let stripe: Stripe | null = null;
if (process.env.STRIPE_SECRET_KEY && process.env.STRIPE_SECRET_KEY.length > 20) {
  stripe = new Stripe(process.env.STRIPE_SECRET_KEY, {
    apiVersion: "2025-07-30.basil",
  });
  console.log("Stripe initialized successfully");
} else {
  console.warn("Stripe not initialized - invalid or missing API key:", process.env.STRIPE_SECRET_KEY?.substring(0, 10) + "...");
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Force redirect for lottery navigation issues
  app.get('/lottery-redirect', (req, res) => {
    res.redirect(302, '/lotteries');
  });

  // Users routes
  app.get("/api/users", async (req, res) => {
    try {
      const users = await storage.getUsers();
      res.json(users);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch users" });
    }
  });

  app.get("/api/users/:id", async (req, res) => {
    try {
      const user = await storage.getUser(req.params.id);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      res.json(user);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch user" });
    }
  });

  app.post("/api/users", async (req, res) => {
    try {
      const validatedData = insertUserSchema.parse(req.body);
      const user = await storage.createUser(validatedData);
      res.status(201).json(user);
    } catch (error) {
      if (error instanceof z.ZodError) {
        return res.status(400).json({ message: "Invalid user data", errors: error.errors });
      }
      res.status(500).json({ message: "Failed to create user" });
    }
  });

  app.patch("/api/users/:id", async (req, res) => {
    try {
      const updateData = req.body;
      const user = await storage.updateUser(req.params.id, updateData);
      res.json(user);
    } catch (error) {
      res.status(500).json({ message: "Failed to update user" });
    }
  });

  app.patch("/api/users/:id/tokens", async (req, res) => {
    try {
      const { tokens } = req.body;
      if (typeof tokens !== "number") {
        return res.status(400).json({ message: "Invalid tokens value" });
      }
      const user = await storage.updateUserTokens(req.params.id, tokens);
      res.json(user);
    } catch (error) {
      res.status(500).json({ message: "Failed to update user tokens" });
    }
  });

  // Missions routes
  app.get("/api/missions", async (req, res) => {
    try {
      const missions = await storage.getActiveMissions();
      res.json(missions);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch missions" });
    }
  });

  app.get("/api/users/:userId/missions", async (req, res) => {
    try {
      const userMissions = await storage.getUserMissions(req.params.userId);
      res.json(userMissions);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch user missions" });
    }
  });

  // Lotteries routes - Use database data instead of hardcoded
  app.get("/api/lotteries", async (req, res) => {
    try {
      const lotteries = await storage.getActiveLotteries();
      res.json(lotteries);
    } catch (error) {
      console.error("Failed to fetch lotteries:", error);
      res.status(500).json({ message: "Failed to fetch lotteries" });
    }
  });

  app.get("/api/lotteries/:id", async (req, res) => {
    try {
      const lottery = await storage.getLottery(req.params.id);
      if (!lottery) {
        return res.status(404).json({ message: "Lottery not found" });
      }
      res.json(lottery);
    } catch (error) {
      console.error("Failed to fetch lottery:", error);
      res.status(500).json({ message: "Failed to fetch lottery" });
    }
  });

  app.post("/api/lotteries/:lotteryId/purchase", async (req, res) => {
    try {
      const { selectedNumbers, isAutoGenerated } = req.body;
      const lotteryId = req.params.lotteryId;
      const userId = "sample-user"; // In real app, get from session
      
      // Validate input
      if (!Array.isArray(selectedNumbers) || selectedNumbers.length !== 6) {
        return res.status(400).json({ 
          message: "Exactly 6 numbers are required",
          error: "INVALID_NUMBERS"
        });
      }
      
      // Validate number range and convert to numbers
      const validatedNumbers = selectedNumbers.map((num, index) => {
        const number = typeof num === 'string' ? parseInt(num, 10) : Number(num);
        if (isNaN(number) || number < 1 || number > 49) {
          throw new Error(`Invalid number at position ${index + 1}: ${num}. Must be between 1-49`);
        }
        return number;
      });
      
      // Check for duplicates
      const uniqueNumbers = new Set(validatedNumbers);
      if (uniqueNumbers.size !== 6) {
        return res.status(400).json({ 
          message: "All numbers must be unique",
          error: "DUPLICATE_NUMBERS"
        });
      }
      
      // Get lottery to check ticket price and generate ticket number
      const lottery = await storage.getLottery(lotteryId);
      if (!lottery) {
        return res.status(404).json({ 
          message: "Lottery not found",
          error: "LOTTERY_NOT_FOUND"
        });
      }
      
      // Generate ticket number (next sequential number)
      const ticketNumber = lottery.soldTickets + 1;
      
      console.log(`🎯 Processing purchase for lottery ${lotteryId}, ticket #${ticketNumber}, numbers: [${validatedNumbers.sort((a,b) => a-b).join(', ')}]`);
      
      const ticket = await storage.purchaseLotteryTicket({
        lotteryId,
        userId,
        ticketNumber,
        selectedNumbers: validatedNumbers.sort((a, b) => a - b).map(String),
        isAutoGenerated: Boolean(isAutoGenerated)
      });
      
      console.log(`✅ Ticket purchased successfully: ${ticket.ticketCode || ticket.id}`);
      
      res.status(201).json({
        ...ticket,
        message: "Ticket purchased successfully"
      });
      
    } catch (error: any) {
      console.error(`❌ Purchase error for lottery ${req.params.lotteryId}:`, error.message);
      
      if (error.message.includes("Insufficient")) {
        return res.status(400).json({ 
          message: error.message,
          error: "INSUFFICIENT_TOKENS"
        });
      }
      
      if (error.message.includes("not found")) {
        return res.status(404).json({ 
          message: error.message,
          error: "NOT_FOUND"
        });
      }
      
      if (error.message.includes("Invalid number")) {
        return res.status(400).json({ 
          message: error.message,
          error: "INVALID_NUMBERS"
        });
      }
      
      res.status(500).json({ 
        message: "Failed to purchase ticket", 
        error: error.message || "INTERNAL_SERVER_ERROR"
      });
    }
  });

  app.get("/api/users/:userId/tickets", async (req, res) => {
    try {
      const tickets = await storage.getUserLotteryTickets(req.params.userId);
      res.json(tickets);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch user tickets" });
    }
  });

  // Lottery draw tracking endpoints
  app.get("/api/lottery-draws", async (req, res) => {
    try {
      const lotteryId = req.query.lotteryId as string;
      const draws = await storage.getLotteryDraws(lotteryId);
      res.json(draws);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch lottery draws" });
    }
  });

  app.get("/api/lottery-draws/:drawId", async (req, res) => {
    try {
      const { drawId } = req.params;
      const draw = await storage.getLotteryDraw(drawId);
      if (!draw) {
        return res.status(404).json({ message: "Draw not found" });
      }
      res.json(draw);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch draw" });
    }
  });

  // New lottery code-based endpoints for unique identification
  app.get("/api/lotteries/code/:lotteryCode", async (req, res) => {
    try {
      const lottery = await storage.getLotteryByCode(req.params.lotteryCode);
      if (!lottery) {
        return res.status(404).json({ message: "Lottery not found" });
      }
      res.json(lottery);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch lottery" });
    }
  });

  // Prizes routes
  app.get("/api/prizes", async (req, res) => {
    try {
      const prizes = await storage.getActivePrizes();
      res.json(prizes);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch prizes" });
    }
  });

  app.get("/api/users/:userId/redemptions", async (req, res) => {
    try {
      const redemptions = await storage.getUserPrizeRedemptions(req.params.userId);
      res.json(redemptions);
    } catch (error) {
      res.status(500).json({ message: "Failed to fetch user redemptions" });
    }
  });

  // Basic health check endpoint
  app.get("/api/health", (req, res) => {
    res.json({ status: "ok", timestamp: new Date().toISOString() });
  });

  const server = createServer(app);
  return server;
}