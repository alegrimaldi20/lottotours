import React, { useState, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Shuffle, Trash2, ShoppingCart, Sparkles } from "lucide-react";

interface LotteryNumberSelectorProps {
  lotteryId: string;
  drawId: string;
  totalNumbers: number;
  numbersToSelect: number;
  ticketPrice: number;
  onAddToCart: (selectedNumbers: number[], isAutoGenerated: boolean) => void;
  className?: string;
}

export const LotteryNumberSelector: React.FC<LotteryNumberSelectorProps> = ({
  lotteryId,
  drawId,
  totalNumbers = 49,
  numbersToSelect = 6,
  ticketPrice,
  onAddToCart,
  className = ""
}) => {
  const [selectedNumbers, setSelectedNumbers] = useState<number[]>([]);
  const [animationsEnabled, setAnimationsEnabled] = useState(true);

  // Generate number grid (1 to totalNumbers)
  const numbers = Array.from({ length: totalNumbers }, (_, i) => i + 1);

  // Toggle number selection
  const toggleNumber = useCallback((number: number) => {
    setSelectedNumbers(prev => {
      if (prev.includes(number)) {
        return prev.filter(n => n !== number);
      } else if (prev.length < numbersToSelect) {
        return [...prev, number].sort((a, b) => a - b);
      }
      return prev;
    });
  }, [numbersToSelect]);

  // Auto-pick random numbers
  const surpriseMe = useCallback(() => {
    const available = numbers.filter(n => !selectedNumbers.includes(n));
    const needed = numbersToSelect - selectedNumbers.length;
    const shuffled = available.sort(() => Math.random() - 0.5);
    const newNumbers = shuffled.slice(0, needed);
    setSelectedNumbers(prev => [...prev, ...newNumbers].sort((a, b) => a - b));
  }, [numbers, selectedNumbers, numbersToSelect]);

  // Clear all selections
  const clearAll = useCallback(() => {
    setSelectedNumbers([]);
  }, []);

  // Add to cart
  const handleAddToCart = useCallback(() => {
    if (selectedNumbers.length === numbersToSelect) {
      onAddToCart(selectedNumbers, false);
      setSelectedNumbers([]); // Clear for next selection
    }
  }, [selectedNumbers, numbersToSelect, onAddToCart]);

  // Auto-pick all numbers
  const autoPickAll = useCallback(() => {
    const shuffled = numbers.sort(() => Math.random() - 0.5);
    const picked = shuffled.slice(0, numbersToSelect);
    setSelectedNumbers(picked.sort((a, b) => a - b));
  }, [numbers, numbersToSelect]);

  const canAddToCart = selectedNumbers.length === numbersToSelect;
  const needsMore = numbersToSelect - selectedNumbers.length;

  return (
    <Card className={`w-full max-w-4xl mx-auto ${className}`}>
      <CardHeader className="bg-gradient-to-r from-lottery-gold via-adventure-orange to-travel-coral text-white">
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Sparkles className="h-6 w-6" />
            <span>Select Your Lucky Numbers</span>
          </div>
          <Badge variant="secondary" className="bg-white/20 text-white">
            Draw #{drawId}
          </Badge>
        </CardTitle>
        <div className="text-white/90">
          Pick {numbersToSelect} numbers from 1 to {totalNumbers} • {ticketPrice} tokens per ticket
        </div>
      </CardHeader>
      
      <CardContent className="p-6">
        {/* Controls */}
        <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium">Quick Actions:</span>
            <Button
              variant="outline"
              size="sm"
              onClick={surpriseMe}
              disabled={selectedNumbers.length >= numbersToSelect}
              className="gap-2"
              data-testid="surprise-me-button"
            >
              <Shuffle className="h-4 w-4" />
              Surprise Me
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={autoPickAll}
              className="gap-2"
              data-testid="auto-pick-button"
            >
              <Sparkles className="h-4 w-4" />
              Auto Pick All
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={clearAll}
              disabled={selectedNumbers.length === 0}
              className="gap-2"
              data-testid="clear-all-button"
            >
              <Trash2 className="h-4 w-4" />
              Clear
            </Button>
          </div>
          
          <div className="flex items-center gap-2">
            <label className="flex items-center gap-2 text-sm">
              <input
                type="checkbox"
                checked={animationsEnabled}
                onChange={(e) => setAnimationsEnabled(e.target.checked)}
                className="rounded"
              />
              Enable animations
            </label>
          </div>
        </div>

        {/* Selection Status */}
        <div className="mb-6 p-4 bg-slate-50 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <span className="text-sm font-medium">
                Selected: {selectedNumbers.length}/{numbersToSelect}
              </span>
              {selectedNumbers.length > 0 && (
                <div className="flex gap-1">
                  {selectedNumbers.map((num) => (
                    <Badge 
                      key={num} 
                      className="bg-lottery-gold text-white cursor-pointer hover:bg-lottery-gold/80"
                      onClick={() => toggleNumber(num)}
                      data-testid={`selected-number-${num}`}
                    >
                      {num}
                    </Badge>
                  ))}
                </div>
              )}
            </div>
            {needsMore > 0 && (
              <span className="text-sm text-slate-500">
                Choose {needsMore} more number{needsMore > 1 ? 's' : ''}
              </span>
            )}
          </div>
        </div>

        {/* Number Grid */}
        <div 
          className="grid grid-cols-7 gap-2 mb-6"
          style={{
            maxWidth: '100%',
            aspectRatio: '7/7'
          }}
        >
          {numbers.map((number) => {
            const isSelected = selectedNumbers.includes(number);
            const isDisabled = !isSelected && selectedNumbers.length >= numbersToSelect;
            
            return (
              <button
                key={number}
                onClick={() => toggleNumber(number)}
                disabled={isDisabled}
                className={`
                  aspect-square rounded-lg border-2 font-semibold text-lg transition-all duration-200
                  ${isSelected 
                    ? 'bg-lottery-gold border-lottery-gold text-white shadow-lg transform scale-105' 
                    : isDisabled
                    ? 'bg-slate-100 border-slate-200 text-slate-400 cursor-not-allowed'
                    : 'bg-white border-slate-300 text-slate-700 hover:border-lottery-gold hover:bg-lottery-gold/10 hover:scale-105 cursor-pointer'
                  }
                  ${animationsEnabled ? 'transition-transform' : ''}
                `}
                data-testid={`number-${number}`}
              >
                {number}
              </button>
            );
          })}
        </div>

        {/* Add to Cart */}
        <div className="flex items-center justify-between p-4 bg-slate-50 rounded-lg">
          <div className="text-sm text-slate-600">
            {canAddToCart ? (
              <span className="text-green-600 font-medium">
                ✓ Ready to add to cart
              </span>
            ) : (
              <span>
                Select {needsMore} more number{needsMore > 1 ? 's' : ''} to continue
              </span>
            )}
          </div>
          <Button
            onClick={handleAddToCart}
            disabled={!canAddToCart}
            className="btn-lottery shadow-lg gap-2"
            data-testid="add-to-cart-button"
          >
            <ShoppingCart className="h-4 w-4" />
            Add to Cart ({ticketPrice} tokens)
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default LotteryNumberSelector;