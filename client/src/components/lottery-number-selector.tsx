import React, { useState, useCallback, useRef, useEffect } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Shuffle, Trash2, ShoppingCart, Sparkles } from "lucide-react";
import Web3Service from "@/lib/web3";

interface LotteryNumberSelectorProps {
  lotteryId: string;
  drawId: string;
  totalNumbers: number;
  numbersToSelect: number;
  ticketPrice: number;
  onAddToCart: (selectedNumbers: number[], isAutoGenerated: boolean) => void;
  className?: string;
}

export const LotteryNumberSelector: React.FC<LotteryNumberSelectorProps> = ({
  lotteryId,
  drawId,
  totalNumbers = 49,
  numbersToSelect = 6,
  ticketPrice,
  onAddToCart,
  className = ""
}) => {
  const [selectedNumbers, setSelectedNumbers] = useState<number[]>([]);
  const [animationsEnabled, setAnimationsEnabled] = useState(true);
  const stateRef = useRef<number[]>([]);
  const pendingUpdate = useRef<boolean>(false);

  // Sync ref with state
  useEffect(() => {
    stateRef.current = selectedNumbers;
  }, [selectedNumbers]);

  // Generate number grid (1 to totalNumbers)
  const numbers = Array.from({ length: totalNumbers }, (_, i) => i + 1);

  // Toggle number selection - Ultra-safe implementation with debouncing
  const toggleNumber = useCallback((number: number) => {
    // Prevent rapid successive calls that might cause DOM issues
    if (pendingUpdate.current) {
      return;
    }
    
    pendingUpdate.current = true;
    
    // Use requestAnimationFrame to ensure DOM is stable
    requestAnimationFrame(() => {
      try {
        const current = stateRef.current;
        let newNumbers: number[] = [];
        
        if (current.includes(number)) {
          // Remove number
          newNumbers = current.filter(n => n !== number);
        } else if (current.length < numbersToSelect) {
          // Add number
          newNumbers = [...current, number];
          // Sort without using array methods that might be locale-sensitive
          for (let i = 0; i < newNumbers.length - 1; i++) {
            for (let j = i + 1; j < newNumbers.length; j++) {
              if (newNumbers[i] > newNumbers[j]) {
                const temp = newNumbers[i];
                newNumbers[i] = newNumbers[j];
                newNumbers[j] = temp;
              }
            }
          }
        } else {
          newNumbers = current;
        }
        
        // Update state in next tick to avoid synchronous DOM issues
        setTimeout(() => {
          try {
            setSelectedNumbers(newNumbers);
            stateRef.current = newNumbers;
          } catch (error) {
            console.warn('State update error:', error);
          } finally {
            pendingUpdate.current = false;
          }
        }, 0);
        
      } catch (error) {
        console.warn('toggleNumber error:', error);
        pendingUpdate.current = false;
      }
    });
  }, [numbersToSelect]);

  // Auto-pick random numbers (fills remaining slots) - Locale-safe
  const surpriseMe = useCallback(() => {
    try {
      if (selectedNumbers.length >= numbersToSelect) return;
      
      const available = numbers.filter(n => !selectedNumbers.includes(n));
      const needed = numbersToSelect - selectedNumbers.length;
      const shuffled = [...available].sort(() => Math.random() - 0.5);
      const newNumbers = shuffled.slice(0, needed);
      
      setSelectedNumbers(prev => {
        try {
          const combined = [...prev, ...newNumbers];
          combined.sort((a, b) => a - b);
          return combined;
        } catch (error) {
          console.warn('surpriseMe state update error:', error);
          return prev;
        }
      });
    } catch (error) {
      console.warn('surpriseMe error:', error);
    }
  }, [numbers, selectedNumbers, numbersToSelect]);

  // Clear all selections - Locale-safe
  const clearAll = useCallback(() => {
    try {
      setSelectedNumbers([]);
    } catch (error) {
      console.warn('clearAll error:', error);
    }
  }, []);

  // Add to cart with Web3 integration - Locale-safe
  const handleAddToCart = useCallback(async () => {
    try {
      if (selectedNumbers.length === numbersToSelect) {
        // Check if wallet is connected for actual blockchain transaction
        const walletAddress = Web3Service.getWalletAddress();
        if (walletAddress) {
          console.log('Web3 wallet connected for transaction:', walletAddress);
          
          // Simulate blockchain interaction for ticket purchase
          const result = await Web3Service.buyLotteryTicket(lotteryId, selectedNumbers);
          if (result.success) {
            console.log('Blockchain transaction successful:', result.txHash);
          } else {
            console.warn('Blockchain transaction failed:', result.error);
          }
        }
        
        // Continue with local state management regardless of blockchain status
        onAddToCart(selectedNumbers, false);
        setSelectedNumbers([]); // Clear for next selection
      }
    } catch (error) {
      console.warn('handleAddToCart error:', error);
    }
  }, [selectedNumbers, numbersToSelect, onAddToCart, lotteryId]);

  // Auto-pick all numbers (replaces current selection) - Locale-safe
  const autoPickAll = useCallback(() => {
    try {
      const shuffled = [...numbers].sort(() => Math.random() - 0.5);
      const picked = shuffled.slice(0, numbersToSelect);
      
      setSelectedNumbers(() => {
        try {
          picked.sort((a, b) => a - b);
          return picked;
        } catch (error) {
          console.warn('autoPickAll state update error:', error);
          return [];
        }
      });
    } catch (error) {
      console.warn('autoPickAll error:', error);
    }
  }, [numbers, numbersToSelect]);

  const canAddToCart = selectedNumbers.length === numbersToSelect;
  const needsMore = numbersToSelect - selectedNumbers.length;

  return (
    <Card className={`w-full max-w-4xl mx-auto ${className}`}>
      <CardHeader className="bg-gradient-to-r from-lottery-gold via-adventure-orange to-travel-coral text-white">
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Sparkles className="h-6 w-6" />
            <span>Select Your Lucky Numbers</span>
          </div>
          <Badge variant="secondary" className="bg-white/20 text-white">
            Draw #{drawId}
          </Badge>
        </CardTitle>
        <div className="text-white/90">
          Pick {numbersToSelect} numbers from 1 to {totalNumbers} â€¢ {ticketPrice} tokens per ticket
        </div>
      </CardHeader>
      
      <CardContent className="p-6">
        {/* Controls */}
        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4 mb-6">
          <div className="flex flex-wrap items-center gap-2">
            <span className="text-sm font-medium text-slate-700 mb-2 sm:mb-0">Quick Actions:</span>
            <div className="flex flex-wrap gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={surpriseMe}
                disabled={selectedNumbers.length >= numbersToSelect}
                className="gap-2 bg-blue-50 hover:bg-blue-100 border-blue-200"
                data-testid="surprise-me-button"
              >
                <Shuffle className="h-4 w-4" />
                Surprise Me
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={autoPickAll}
                className="gap-2 bg-purple-50 hover:bg-purple-100 border-purple-200"
                data-testid="auto-pick-button"
              >
                <Sparkles className="h-4 w-4" />
                Auto Pick All
              </Button>
              <Button
                variant="outline"
                size="sm"
                onClick={clearAll}
                disabled={selectedNumbers.length === 0}
                className="gap-2 bg-red-50 hover:bg-red-100 border-red-200"
                data-testid="clear-all-button"
              >
                <Trash2 className="h-4 w-4" />
                Clear
              </Button>
            </div>
          </div>
        </div>

        {/* Selection Status */}
        <div className="mb-6 p-4 bg-slate-50 rounded-lg">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <span className="text-sm font-medium">
                Selected: {selectedNumbers.length}/{numbersToSelect}
              </span>
              {selectedNumbers.length > 0 && (
                <div className="flex gap-1">
                  {selectedNumbers.map((num) => (
                    <Badge 
                      key={num} 
                      className="bg-lottery-gold text-white cursor-pointer hover:bg-lottery-gold/80"
                      onClick={() => toggleNumber(num)}
                      data-testid={`selected-number-${num}`}
                    >
                      {num}
                    </Badge>
                  ))}
                </div>
              )}
            </div>
            {needsMore > 0 && (
              <span className="text-sm text-slate-500">
                Choose {needsMore} more number{needsMore > 1 ? 's' : ''}
              </span>
            )}
          </div>
        </div>

        {/* Number Grid */}
        <div 
          className="grid grid-cols-7 gap-2 mb-6"
          style={{
            maxWidth: '100%',
            aspectRatio: '7/7'
          }}
        >
          {numbers.map((number) => {
            const isSelected = selectedNumbers.includes(number);
            const isDisabled = !isSelected && selectedNumbers.length >= numbersToSelect;
            
            return (
              <button
                key={number}
                onClick={(e) => {
                  try {
                    e.preventDefault();
                    e.stopPropagation();
                    
                    // Additional safety: disable button temporarily
                    const button = e.currentTarget;
                    button.disabled = true;
                    
                    toggleNumber(number);
                    
                    // Re-enable after short delay
                    setTimeout(() => {
                      if (button) {
                        button.disabled = isDisabled;
                      }
                    }, 100);
                  } catch (error) {
                    console.warn('Button click error:', error);
                  }
                }}
                disabled={isDisabled}
                className={`
                  aspect-square rounded-lg border-2 font-semibold text-lg transition-all duration-200
                  ${isSelected 
                    ? 'bg-lottery-gold border-lottery-gold text-white shadow-lg transform scale-105' 
                    : isDisabled
                    ? 'bg-slate-100 border-slate-200 text-slate-400 cursor-not-allowed'
                    : 'bg-white border-slate-300 text-slate-700 hover:border-lottery-gold hover:bg-lottery-gold/10 hover:scale-105 cursor-pointer'
                  }
                  ${animationsEnabled ? 'transition-transform' : ''}
                `}
                data-testid={`number-${number}`}
              >
                {number}
              </button>
            );
          })}
        </div>

        {/* Add to Cart */}
        <div className="flex items-center justify-between p-4 bg-slate-50 rounded-lg">
          <div className="text-sm text-slate-600">
            {canAddToCart ? (
              <span className="text-green-600 font-medium">
                âœ“ Ready to add to cart
              </span>
            ) : (
              <span>
                Select {needsMore} more number{needsMore > 1 ? 's' : ''} to continue
              </span>
            )}
          </div>
          <Button
            onClick={handleAddToCart}
            disabled={!canAddToCart}
            className="btn-lottery shadow-lg gap-2"
            data-testid="add-to-cart-button"
          >
            <ShoppingCart className="h-4 w-4" />
            Add to Cart ({ticketPrice} tokens)
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default LotteryNumberSelector;