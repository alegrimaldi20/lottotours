import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { type LotteryTicket, type Lottery, type User } from "@shared/schema";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";

import { 
  Trophy, Clock, Users, Ticket, Coins, Calendar, MapPin, Copy, 
  CheckCircle, XCircle, Star, Gift, ArrowLeft, Timer, DollarSign, 
  Filter, Search, Archive
} from "lucide-react";
import MobileNavigation from "@/components/mobile-navigation";
import NavigationDropdown from "@/components/navigation-dropdown";
import ProfileDropdown from "@/components/profile-dropdown";
import LanguageSelector from "@/components/language-selector";
import TravelImageRenderer from "@/components/travel-image-renderer";
import { KairosTokenBalance } from "@/components/KairosTokenBalance";
import { useLanguage } from "@/lib/i18n";
import { useToast } from "@/hooks/use-toast";

const SAMPLE_USER_ID = "sample-user";

export default function TicketHistory() {
  const { toast } = useToast();
  const { t } = useLanguage();
  const [activeTab, setActiveTab] = useState("active");

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: "Copiado!",
        description: `${label} copiado al portapapeles`,
      })
    }).catch(() => {
      toast({
        title: "Error al copiar",
        description: "Por favor copia manualmente",
        variant: "destructive"
      })
    })
  }

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users", SAMPLE_USER_ID],
  });

  const { data: allTickets = [], isLoading } = useQuery<LotteryTicket[]>({
    queryKey: ["/api/lottery-tickets/user", SAMPLE_USER_ID],
  });

  const { data: lotteries = [] } = useQuery<Lottery[]>({
    queryKey: ["/api/lotteries"],
  });

  // Categorize tickets
  const activeTickets = allTickets.filter(ticket => {
    const lottery = lotteries.find(l => l.id === ticket.lotteryId);
    return lottery && new Date(lottery.drawDate) > new Date();
  });

  const completedTickets = allTickets.filter(ticket => {
    const lottery = lotteries.find(l => l.id === ticket.lotteryId);
    return lottery && new Date(lottery.drawDate) <= new Date() && !ticket.isWinner;
  });

  const winningTickets = allTickets.filter(ticket => ticket.isWinner);

  const specialTickets = allTickets.filter(ticket => 
    ticket.ticketCode?.includes("SPECIAL") || ticket.ticketNumber === 1
  );

  const formatTimeRemaining = (drawDate: Date) => {
    const now = new Date();
    const diff = new Date(drawDate).getTime() - now.getTime();
    
    if (diff <= 0) return "Sorteo finalizado";
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    
    if (days > 0) return `${days}d ${hours}h restantes`;
    return `${hours}h restantes`;
  };

  const formatPrizeValue = (value: number) => {
    if (value >= 100000) {
      return `$USD ${Math.floor(value / 1000)}K`;
    } else {
      return `$USD ${value.toLocaleString()}`;
    }
  };

  const getLotteryInfo = (lotteryId: string) => {
    return lotteries.find(l => l.id === lotteryId);
  };

  const TicketCard = ({ ticket, showStatus = true }: { ticket: LotteryTicket, showStatus?: boolean }) => {
    const lottery = getLotteryInfo(ticket.lotteryId);
    if (!lottery) return null;

    const isActive = new Date(lottery.drawDate) > new Date();
    const isCompleted = new Date(lottery.drawDate) <= new Date();

    return (
      <Card className="hover:shadow-lg transition-all duration-300">
        <CardContent className="p-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <div className="flex items-center gap-2 mb-2">
                <h3 className="font-semibold text-lg">{lottery.title}</h3>
                {ticket.isWinner && (
                  <Badge className="bg-green-500 text-white">
                    <Trophy className="w-3 h-3 mr-1" />
                    GANADOR
                  </Badge>
                )}
                {ticket.isAutoGenerated && (
                  <Badge variant="secondary" className="text-xs">Auto</Badge>
                )}
              </div>
              <p className="text-sm text-slate-600 mb-2">
                Ticket #{ticket.ticketNumber} • {ticket.ticketCode}
              </p>
              <div className="flex items-center gap-2 text-sm text-slate-500">
                <Calendar className="w-4 h-4" />
                {lottery.theme} • {formatTimeRemaining(new Date(lottery.drawDate))}
              </div>
            </div>
            <div className="text-right">
              <div className="text-2xl font-bold text-lottery-gold mb-1">
                {formatPrizeValue(lottery.prizeValue)}
              </div>
              <div className="text-sm text-slate-600">
                {lottery.ticketPrice} Kairos
              </div>
            </div>
          </div>

          {/* Selected Numbers */}
          <div className="mb-4">
            <p className="text-sm font-medium mb-2">Números seleccionados:</p>
            <div className="flex gap-2 flex-wrap">
              {ticket.selectedNumbers.map((num, index) => (
                <Badge 
                  key={index} 
                  className="bg-blue-600 text-white font-bold px-3 py-1"
                >
                  {num}
                </Badge>
              ))}
            </div>
          </div>

          {/* Status and Actions */}
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              {showStatus && (
                <>
                  {isActive && (
                    <Badge className="bg-green-100 text-green-800">
                      <Clock className="w-3 h-3 mr-1" />
                      Activo
                    </Badge>
                  )}
                  {isCompleted && !ticket.isWinner && (
                    <Badge className="bg-gray-100 text-gray-800">
                      <Archive className="w-3 h-3 mr-1" />
                      Finalizado
                    </Badge>
                  )}
                </>
              )}
            </div>
            <div className="flex gap-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => copyToClipboard(ticket.ticketCode, "Código de ticket")}
                className="gap-1"
              >
                <Copy className="w-3 h-3" />
                Copiar código
              </Button>
              <Link href={`/lottery/${lottery.id}`}>
                <Button variant="outline" size="sm">
                  Ver lotería
                </Button>
              </Link>
            </div>
          </div>
        </CardContent>
      </Card>
    );
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse space-y-8">
            <div className="h-8 bg-slate-200 rounded w-64"></div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, i) => (
                <div key={i} className="h-64 bg-slate-200 rounded"></div>
              ))}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center gap-4 mb-4">
            <Link href="/lotteries">
              <Button variant="ghost" size="sm" className="gap-2" data-testid="back-button">
                <ArrowLeft className="h-4 w-4" />
                Volver a loterías
              </Button>
            </Link>
          </div>

          <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
            <div>
              <h1 className="text-3xl font-bold text-slate-900 mb-2">
                Historial de Boletos
              </h1>
              <p className="text-slate-600">
                Gestiona y consulta todos tus boletos de lotería
              </p>
            </div>
            
            <div className="flex items-center gap-4">
              <KairosTokenBalance />
              <div className="flex items-center gap-6 text-sm">
                <MobileNavigation />
                <NavigationDropdown />
                <LanguageSelector />
                <ProfileDropdown />
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Statistics Cards */}
      <div className="max-w-6xl mx-auto px-4 py-8">
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6 text-center">
              <Clock className="h-8 w-8 text-blue-600 mx-auto mb-2" />
              <div className="text-2xl font-bold">{activeTickets.length}</div>
              <div className="text-sm text-slate-600">Boletos Activos</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6 text-center">
              <Trophy className="h-8 w-8 text-green-600 mx-auto mb-2" />
              <div className="text-2xl font-bold">{winningTickets.length}</div>
              <div className="text-sm text-slate-600">Boletos Ganadores</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6 text-center">
              <Star className="h-8 w-8 text-yellow-600 mx-auto mb-2" />
              <div className="text-2xl font-bold">{specialTickets.length}</div>
              <div className="text-sm text-slate-600">Boletos Especiales</div>
            </CardContent>
          </Card>
          
          <Card>
            <CardContent className="p-6 text-center">
              <Archive className="h-8 w-8 text-gray-600 mx-auto mb-2" />
              <div className="text-2xl font-bold">{completedTickets.length}</div>
              <div className="text-sm text-slate-600">Finalizados</div>
            </CardContent>
          </Card>
        </div>

        {/* Tabs for different ticket categories */}
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="active">
              Activos ({activeTickets.length})
            </TabsTrigger>
            <TabsTrigger value="winners">
              Ganadores ({winningTickets.length})
            </TabsTrigger>
            <TabsTrigger value="special">
              Especiales ({specialTickets.length})
            </TabsTrigger>
            <TabsTrigger value="completed">
              Finalizados ({completedTickets.length})
            </TabsTrigger>
          </TabsList>

          <TabsContent value="active" className="mt-8">
            {activeTickets.length === 0 ? (
              <Card>
                <CardContent className="p-12 text-center">
                  <Clock className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No tienes boletos activos</h3>
                  <p className="text-slate-600 mb-4">
                    Compra boletos en nuestras loterías activas para participar
                  </p>
                  <Link href="/lotteries">
                    <Button className="btn-lottery">
                      Ver loterías activas
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {activeTickets.map((ticket) => (
                  <TicketCard key={ticket.id} ticket={ticket} />
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="winners" className="mt-8">
            {winningTickets.length === 0 ? (
              <Card>
                <CardContent className="p-12 text-center">
                  <Trophy className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No tienes boletos ganadores aún</h3>
                  <p className="text-slate-600 mb-4">
                    Sigue participando para tener la oportunidad de ganar increíbles premios
                  </p>
                  <Link href="/lotteries">
                    <Button className="btn-lottery">
                      Participar en loterías
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {winningTickets.map((ticket) => (
                  <TicketCard key={ticket.id} ticket={ticket} showStatus={false} />
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="special" className="mt-8">
            {specialTickets.length === 0 ? (
              <Card>
                <CardContent className="p-12 text-center">
                  <Star className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No tienes boletos especiales</h3>
                  <p className="text-slate-600 mb-4">
                    Los boletos especiales se otorgan por participación temprana o eventos especiales
                  </p>
                  <Link href="/lotteries">
                    <Button className="btn-lottery">
                      Ver loterías activas
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {specialTickets.map((ticket) => (
                  <TicketCard key={ticket.id} ticket={ticket} />
                ))}
              </div>
            )}
          </TabsContent>

          <TabsContent value="completed" className="mt-8">
            {completedTickets.length === 0 ? (
              <Card>
                <CardContent className="p-12 text-center">
                  <Archive className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold mb-2">No tienes boletos finalizados</h3>
                  <p className="text-slate-600">
                    Los boletos aparecerán aquí después de que termine el sorteo
                  </p>
                </CardContent>
              </Card>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {completedTickets.map((ticket) => (
                  <TicketCard key={ticket.id} ticket={ticket} showStatus={false} />
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}