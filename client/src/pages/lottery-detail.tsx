import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useRoute, Link } from "wouter";
import { ArrowLeft, Calendar, Users, Trophy, MapPin, Clock, Coins } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { apiRequest } from "@/lib/queryClient";
import TravelImageRenderer from "@/components/travel-image-renderer";
import LotteryNumberSelector from "@/components/lottery-number-selector";
import React from "react";
import { showSuccess, showError } from "@/utils/native-notifications";

import WalletConnector from "@/components/wallet-connector";
import type { Lottery, User } from "@shared/schema";

interface LotteryTicketCart {
  selectedNumbers: number[];
  isAutoGenerated: boolean;
}

export default function LotteryDetail() {
  const [, params] = useRoute("/lottery/:id");
  const queryClient = useQueryClient();
  const [ticketCart, setTicketCart] = useState<LotteryTicketCart[]>([]);

  const { data: lottery, isLoading } = useQuery<Lottery>({
    queryKey: [`/api/lotteries/${params?.id}`],
    enabled: !!params?.id,
  });

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users/sample-user"],
  });

  const buyTicketsMutation = useMutation({
    mutationFn: async () => {
      if (!ticketCart.length) throw new Error("No tickets in cart");
      if (!lottery) throw new Error("Lottery not found");
      
      const totalCost = ticketCart.length * lottery.ticketPrice;
      
      for (const ticket of ticketCart) {
        await apiRequest(`/api/lotteries/${lottery.id}/purchase`, {
          method: "POST",
          body: {
            selectedNumbers: ticket.selectedNumbers,
            isAutoGenerated: ticket.isAutoGenerated
          },
        });
      }
      
      return { ticketCount: ticketCart.length, totalCost };
    },
    onSuccess: (data) => {
      showSuccess(
        "Tickets Purchased!",
        `Successfully bought ${data.ticketCount} ticket${data.ticketCount > 1 ? 's' : ''} for ${data.totalCost} tokens.`
      );
      setTicketCart([]);
      queryClient.invalidateQueries({ queryKey: [`/api/lotteries/${params?.id}`] });
      queryClient.invalidateQueries({ queryKey: ["/api/users/sample-user"] });
    },
    onError: (error) => {
      showError(
        "Purchase Failed",
        error.message || "Failed to purchase tickets. Please try again."
      );
    },
  });

  const handleAddToCart = (selectedNumbers: number[], isAutoGenerated: boolean = false) => {
    setTicketCart(prev => [...prev, { selectedNumbers, isAutoGenerated }]);
    if (typeof showSuccess === 'function') {
      showSuccess(
        "Added to Cart",
        `Ticket with numbers ${selectedNumbers.join(", ")} added to cart.`
      );
    }
  };

  const removeFromCart = (index: number) => {
    setTicketCart(prev => prev.filter((_, i) => i !== index));
  };

  const canAfford = user && lottery && (user.tokens >= ticketCart.length * lottery.ticketPrice);
  const totalCost = ticketCart.length * (lottery?.ticketPrice || 0);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse space-y-8">
            <div className="h-8 bg-slate-200 rounded w-64"></div>
            <div className="h-64 bg-slate-200 rounded"></div>
            <div className="h-96 bg-slate-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!lottery) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 p-4">
        <div className="max-w-6xl mx-auto text-center py-20">
          <h1 className="text-2xl font-bold text-slate-900 mb-4">Lottery Not Found</h1>
          <p className="text-slate-600 mb-8">The lottery you're looking for doesn't exist.</p>
          <Link href="/lotteries">
            <Button className="btn-lottery shadow-lg">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Lotteries
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  const daysUntilDraw = Math.ceil((new Date(lottery.drawDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
  const ticketsRemaining = lottery.maxTickets - lottery.soldTickets;

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-4 py-6">
          <div className="flex items-center gap-4 mb-4">
            <Link href="/lotteries">
              <Button variant="ghost" size="sm" className="gap-2" data-testid="back-button">
                <ArrowLeft className="h-4 w-4" />
                Back to Lotteries
              </Button>
            </Link>
            <Badge variant="secondary" className="bg-lottery-gold text-white">
              Draw #{lottery.id.slice(-8)}
            </Badge>
          </div>
          
          <div className="grid lg:grid-cols-3 gap-8">
            <div className="lg:col-span-2">
              <h1 className="text-3xl font-bold text-slate-900 mb-3" data-testid="lottery-title">
                {lottery.title}
              </h1>
              <p className="text-lg text-slate-600 mb-6" data-testid="lottery-description">
                {lottery.description}
              </p>
              
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center p-4 bg-gradient-to-br from-lottery-gold/10 to-adventure-orange/10 rounded-lg">
                  <Trophy className="h-6 w-6 mx-auto mb-2 text-lottery-gold" />
                  <div className="text-xl font-bold text-slate-900">${(lottery.prizeValue / 100).toLocaleString()}</div>
                  <div className="text-sm text-slate-600">Prize Value</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-travel-coral/10 to-lottery-purple/10 rounded-lg">
                  <Calendar className="h-6 w-6 mx-auto mb-2 text-travel-coral" />
                  <div className="text-xl font-bold text-slate-900">{daysUntilDraw}</div>
                  <div className="text-sm text-slate-600">Days Left</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-adventure-teal/10 to-ocean-pulse/10 rounded-lg">
                  <Users className="h-6 w-6 mx-auto mb-2 text-adventure-teal" />
                  <div className="text-xl font-bold text-slate-900">{lottery.soldTickets}</div>
                  <div className="text-sm text-slate-600">Tickets Sold</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-lottery-purple/10 to-travel-coral/10 rounded-lg">
                  <Coins className="h-6 w-6 mx-auto mb-2 text-lottery-purple" />
                  <div className="text-xl font-bold text-slate-900">{lottery.ticketPrice}</div>
                  <div className="text-sm text-slate-600">Tokens/Ticket</div>
                </div>
              </div>
            </div>
            
            <div className="relative h-64 lg:h-full rounded-xl overflow-hidden shadow-xl">
              <TravelImageRenderer 
                type="lottery" 
                theme={lottery.theme} 
                className="w-full h-full object-cover" 
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
              <div className="absolute bottom-4 left-4 text-white">
                <h3 className="font-bold text-xl mb-2">{lottery.prizeTitle}</h3>
                <p className="text-sm opacity-90">{lottery.prizeDescription}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-6xl mx-auto p-4 space-y-8">
        {/* Wallet Integration */}
        <div className="flex justify-center">
          <Card className="w-full max-w-md">
            <CardContent className="pt-6">
              <WalletConnector onWalletChange={(address) => {
                console.log('Wallet connected:', address);
              }} />
              {user && (
                <div className="mt-4 p-3 bg-slate-50 rounded-lg">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-slate-600">Available Tokens:</span>
                    <span className="font-semibold text-blue-600">{user.tokens}</span>
                  </div>
                  <div className="flex items-center justify-between text-sm mt-1">
                    <span className="text-slate-600">Ticket Cost:</span>
                    <span className="font-semibold">{lottery?.ticketPrice || 0} tokens</span>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </div>
        
        {/* Number Selection */}
        <LotteryNumberSelector
          onNumbersSelected={(numbers: number[]) => {
            handleAddToCart(numbers, false);
          }}
          maxNumbers={6}
          numberRange={{ min: 1, max: 49 }}
        />

        {/* Shopping Cart */}
        {ticketCart.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Trophy className="h-5 w-5 text-lottery-gold" />
                Your Tickets ({ticketCart.length})
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-3 mb-6">
                {ticketCart.map((ticket, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-slate-50 rounded-lg">
                    <div className="flex items-center gap-3">
                      <div className="text-sm font-medium">Ticket #{index + 1}:</div>
                      <div className="flex gap-1">
                        {ticket.selectedNumbers.map((num) => (
                          <Badge key={num} className="bg-blue-600 text-white">
                            {num}
                          </Badge>
                        ))}
                      </div>
                      {ticket.isAutoGenerated && (
                        <Badge variant="secondary" className="text-xs">Quick Pick</Badge>
                      )}
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeFromCart(index)}
                      className="text-red-600 hover:text-red-700"
                    >
                      Remove
                    </Button>
                  </div>
                ))}
              </div>
              
              <div className="border-t pt-4">
                <div className="flex items-center justify-between mb-4">
                  <div>
                    <div className="text-lg font-semibold">Total: {totalCost} tokens</div>
                    <div className="text-sm text-slate-600">
                      {ticketCart.length} ticket{ticketCart.length > 1 ? 's' : ''}
                    </div>
                  </div>
                  <div className="text-right text-sm text-slate-600">
                    <div>Your Balance: {user?.tokens || 0} tokens</div>
                    <div>After Purchase: {(user?.tokens || 0) - totalCost} tokens</div>
                  </div>
                </div>
                
                {!canAfford && (
                  <Link href="/token-shop">
                    <Button variant="outline" className="w-full mb-3">
                      Buy More Tokens
                    </Button>
                  </Link>
                )}
                
                <Button
                  onClick={() => buyTicketsMutation.mutate()}
                  disabled={!canAfford || buyTicketsMutation.isPending}
                  className="w-full bg-blue-600 hover:bg-blue-700"
                  size="lg"
                  data-testid="buy-tickets-button"
                >
                  {buyTicketsMutation.isPending ? "Processing Purchase..." : 
                   !canAfford ? "Insufficient Tokens" : 
                   `Purchase ${ticketCart.length} Ticket${ticketCart.length > 1 ? 's' : ''}`}
                </Button>
                
                {!canAfford && (
                  <p className="text-sm text-red-600 mt-2 text-center">
                    You need {totalCost - (user?.tokens || 0)} more tokens to purchase these tickets.
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Prize Details */}
        <Card>
          <CardHeader>
            <CardTitle>Prize Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-2">What You'll Win</h3>
                <p className="text-slate-600 mb-4">{lottery.prizeDescription}</p>
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm">
                    <MapPin className="h-4 w-4 text-slate-500" />
                    <span>Destination theme: {lottery.theme}</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <Clock className="h-4 w-4 text-slate-500" />
                    <span>Draw date: {new Date(lottery.drawDate).toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
              <div>
                <h3 className="font-semibold mb-2">How to Play</h3>
                <ul className="text-sm text-slate-600 space-y-1">
                  <li>• Select 6 numbers from 1 to 49</li>
                  <li>• Each ticket costs {lottery.ticketPrice} tokens</li>
                  <li>• Match all numbers to win the grand prize</li>
                  <li>• Draw takes place on {new Date(lottery.drawDate).toLocaleDateString()}</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}