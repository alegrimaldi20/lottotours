import { useState, useEffect } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useRoute, Link } from "wouter";
import { ArrowLeft, Calendar, Users, Trophy, MapPin, Clock, Coins, Shuffle, Copy, Sparkles, Check, Gift, Zap, Star } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { apiRequest } from "@/lib/queryClient";
import TravelImageRenderer from "@/components/travel-image-renderer";
import LotteryNumberSelector from "@/components/lottery-number-selector";
import React from "react";
import { showSuccess, showError } from "@/utils/native-notifications";
import { useToast } from "@/hooks/use-toast";
import { motion, AnimatePresence } from "framer-motion";

import WalletConnector from "@/components/wallet-connector";
import { KairosTokenBalance } from "@/components/KairosTokenBalance";
import type { Lottery, User } from "@shared/schema";

interface LotteryTicketCart {
  selectedNumbers: number[];
  isAutoGenerated: boolean;
}

export default function LotteryDetail() {
  const [, params] = useRoute("/lottery/:id");
  const queryClient = useQueryClient();
  const [ticketCart, setTicketCart] = useState<LotteryTicketCart[]>([]);
  const { toast } = useToast();

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: "Copied!",
        description: `${label} copied to clipboard`,
      })
    }).catch(() => {
      toast({
        title: "Copy failed",
        description: "Please copy manually",
        variant: "destructive"
      })
    })
  }

  const { data: lottery, isLoading } = useQuery<Lottery>({
    queryKey: [`/api/lotteries/${params?.id}`],
    enabled: !!params?.id,
  });

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users/sample-user"],
  });

  const [buyingTickets, setBuyingTickets] = useState(false);
  const [purchaseState, setPurchaseState] = useState<'idle' | 'processing' | 'success' | 'error'>('idle');
  const [purchaseResults, setPurchaseResults] = useState<{completedTickets: number, totalCost: number, errors: string[]}>({
    completedTickets: 0, 
    totalCost: 0, 
    errors: []
  });
  const [showConfetti, setShowConfetti] = useState(false);
  
  const buyTickets = async () => {
    if (buyingTickets || !ticketCart.length || !lottery) return;
    
    const totalCost = ticketCart.length * lottery.ticketPrice;
    
    // Check if user has enough tokens first
    if (!user || (user.kairosTokens || 0) < totalCost) {
      setPurchaseState('error');
      toast({
        title: "Tokens insuficientes",
        description: `Necesitas ${totalCost} Kairos tokens.`,
        variant: "destructive"
      });
      setTimeout(() => setPurchaseState('idle'), 3000);
      return;
    }
    
    setBuyingTickets(true);
    setPurchaseState('processing');
    
    try {
      let completedTickets = 0;
      const errors: string[] = [];
      
      for (let index = 0; index < ticketCart.length; index++) {
        const ticket = ticketCart[index];
        
        // Validate numbers first
        if (!ticket.selectedNumbers || ticket.selectedNumbers.length !== 6) {
          errors.push(`Ticket ${index + 1}: Debe tener exactamente 6 números`);
          continue;
        }
        
        // Convert to numbers and validate range
        const numbers = ticket.selectedNumbers.map(n => {
          const num = typeof n === 'string' ? parseInt(n, 10) : Number(n);
          if (isNaN(num) || num < 1 || num > 49) {
            throw new Error(`Número inválido: ${n}`);
          }
          return num;
        });
        
        try {
          const response = await fetch(`/api/lotteries/${lottery.id}/purchase`, {
            method: "POST",
            headers: { 
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({
              selectedNumbers: numbers,
              isAutoGenerated: ticket.isAutoGenerated === true
            })
          });
          
          if (response.status === 201 || response.ok) {
            const result = await response.json();
            if (result && result.id) {
              completedTickets++;
              console.log(`✅ Ticket ${index + 1} purchased successfully:`, result.ticketCode || result.id);
              
              // Small delay for UI feedback
              if (index < ticketCart.length - 1) {
                await new Promise(resolve => setTimeout(resolve, 200));
              }
            } else {
              errors.push(`Ticket ${index + 1}: Respuesta inválida del servidor`);
            }
          } else {
            let errorMsg = `Error ${response.status}`;
            try {
              const errorData = await response.json();
              errorMsg = errorData.message || errorData.error || errorMsg;
            } catch {
              const errorText = await response.text();
              errorMsg = errorText || errorMsg;
            }
            errors.push(`Ticket ${index + 1}: ${errorMsg}`);
            console.error(`❌ Ticket ${index + 1} failed:`, response.status, errorMsg);
          }
        } catch (networkError: any) {
          const errorMsg = networkError.message || 'Error de conexión';
          errors.push(`Ticket ${index + 1}: ${errorMsg}`);
          console.error(`🌐 Network error for ticket ${index + 1}:`, networkError);
        }
      }
      
      setBuyingTickets(false);
      setPurchaseResults({ completedTickets, totalCost, errors });
      
      if (completedTickets === ticketCart.length) {
        // Perfect success
        setPurchaseState('success');
        setShowConfetti(true);
        setTimeout(() => setShowConfetti(false), 4000);
        setTicketCart([]);
        
        // Refresh data
        queryClient.invalidateQueries({ queryKey: [`/api/lotteries/${params?.id}`] });
        queryClient.invalidateQueries({ queryKey: ["/api/users/sample-user"] });
        queryClient.invalidateQueries({ queryKey: ["/api/lottery-tickets/user", "sample-user"] });
        
        toast({
          title: "¡Compra exitosa!",
          description: `${completedTickets} tickets comprados correctamente`,
          variant: "default"
        });
      } else if (completedTickets > 0) {
        // Partial success
        setPurchaseState('success');
        setShowConfetti(true);
        setTimeout(() => setShowConfetti(false), 3000);
        setTicketCart([]);
        
        // Refresh data
        queryClient.invalidateQueries({ queryKey: [`/api/lotteries/${params?.id}`] });
        queryClient.invalidateQueries({ queryKey: ["/api/users/sample-user"] });
        
        toast({
          title: "Compra parcialmente exitosa",
          description: `${completedTickets} de ${ticketCart.length} tickets comprados. Algunos fallaron: ${errors.slice(0, 2).join(', ')}${errors.length > 2 ? '...' : ''}`,
          variant: "default"
        });
      } else {
        // Complete failure
        setPurchaseState('error');
        setTimeout(() => setPurchaseState('idle'), 3000);
        
        toast({
          title: "Error en la compra",
          description: `No se pudo comprar ningún ticket. ${errors.slice(0, 2).join(', ')}${errors.length > 2 ? '...' : ''}`,
          variant: "destructive"
        });
      }
      
    } catch (generalError: any) {
      setBuyingTickets(false);
      setPurchaseState('error');
      setTimeout(() => setPurchaseState('idle'), 3000);
      
      console.error("💥 General purchase error:", generalError);
      toast({
        title: "Error general",
        description: generalError.message || 'Error inesperado. Intenta nuevamente.',
        variant: "destructive"
      });
    }
  };

  // Reset purchase state when modal closes
  useEffect(() => {
    if (purchaseState === 'success' || purchaseState === 'error') {
      const timer = setTimeout(() => {
        setPurchaseState('idle');
      }, 5000);
      return () => clearTimeout(timer);
    }
  }, [purchaseState]);

  const handleAddToCart = (selectedNumbers: number[], isAutoGenerated: boolean = false) => {
    try {
      if (!selectedNumbers || selectedNumbers.length === 0) {
        console.warn('No numbers selected for ticket');
        return;
      }
      
      setTicketCart(prev => [...prev, { selectedNumbers: [...selectedNumbers], isAutoGenerated }]);
      toast({
        title: "Añadido al carrito",
        description: `Ticket con números ${selectedNumbers.join(", ")} añadido al carrito`
      });
    } catch (error) {
      console.error('Error adding ticket to cart:', error);
      toast({
        title: "Error",
        description: "No se pudo añadir el ticket al carrito",
        variant: "destructive"
      });
    }
  };

  const removeFromCart = (index: number) => {
    setTicketCart(prev => prev.filter((_, i) => i !== index));
  };

  const canAfford = user && lottery && (user.kairosTokens >= ticketCart.length * lottery.ticketPrice);
  const totalCost = ticketCart.length * (lottery?.ticketPrice || 0);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 p-4">
        <div className="max-w-6xl mx-auto">
          <div className="animate-pulse space-y-8">
            <div className="h-8 bg-slate-200 rounded w-64"></div>
            <div className="h-64 bg-slate-200 rounded"></div>
            <div className="h-96 bg-slate-200 rounded"></div>
          </div>
        </div>
      </div>
    );
  }

  if (!lottery) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50 p-4">
        <div className="max-w-6xl mx-auto text-center py-20">
          <h1 className="text-2xl font-bold text-slate-900 mb-4">Lottery Not Found</h1>
          <p className="text-slate-600 mb-8">The lottery you're looking for doesn't exist.</p>
          <Link href="/lotteries">
            <Button className="btn-lottery shadow-lg">
              <ArrowLeft className="mr-2 h-4 w-4" />
              Back to Lotteries
            </Button>
          </Link>
        </div>
      </div>
    );
  }

  const daysUntilDraw = Math.ceil((new Date(lottery.drawDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24));
  const ticketsRemaining = lottery.maxTickets - lottery.soldTickets;

  const formatPrizeValue = (value: number) => {
    // Format as $USD with maximum 5 digits
    if (value >= 100000) {
      // Values 100K+ shown as whole thousands (e.g., $USD 125)
      return `$USD ${Math.floor(value / 1000)}`;
    } else {
      // Values under 100K shown with commas (e.g., $USD 1,250)
      return `$USD ${value.toLocaleString()}`;
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-pink-50 to-orange-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-6xl mx-auto px-2 sm:px-4 py-3 sm:py-6">
          <div className="flex items-center gap-2 sm:gap-4 mb-2 sm:mb-4">
            <Link href="/lotteries">
              <Button variant="ghost" size="sm" className="gap-1 sm:gap-2 text-xs sm:text-sm" data-testid="back-button">
                <ArrowLeft className="h-3 w-3 sm:h-4 sm:w-4" />
                <span className="hidden sm:inline">Back to Lotteries</span>
                <span className="sm:hidden">Atrás</span>
              </Button>
            </Link>
            <div className="flex items-center gap-3">
              <Badge variant="secondary" className="bg-lottery-gold text-white">
                Draw #{lottery.id.slice(-8)}
              </Badge>
              {lottery.lotteryCode && (
                <div className="flex items-center gap-2 bg-blue-50 dark:bg-blue-900/20 px-3 py-2 rounded-lg border border-blue-200 dark:border-blue-800">
                  <span className="text-sm font-medium text-blue-700 dark:text-blue-300">Lottery ID:</span>
                  <code className="font-mono font-bold text-blue-800 dark:text-blue-200" data-testid="lottery-identification-code">
                    {lottery.lotteryCode}
                  </code>
                  <Button
                    data-testid="button-copy-lottery-id"
                    variant="ghost"
                    size="sm"
                    onClick={() => copyToClipboard(lottery.lotteryCode!, "Lottery ID")}
                    className="h-6 w-6 p-0 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-200"
                  >
                    <Copy className="h-3 w-3" />
                  </Button>
                </div>
              )}
            </div>
          </div>
          
          <div className="grid lg:grid-cols-3 gap-4 sm:gap-8">
            <div className="lg:col-span-2">
              <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold text-slate-900 mb-2 sm:mb-3" data-testid="lottery-title">
                {lottery.title}
              </h1>
              <p className="text-sm sm:text-base lg:text-lg text-slate-600 mb-4 sm:mb-6" data-testid="lottery-description">
                {lottery.description}
              </p>
              
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-4">
                <div className="text-center p-2 sm:p-4 bg-gradient-to-br from-lottery-gold/10 to-adventure-orange/10 rounded-lg">
                  <Trophy className="h-4 w-4 sm:h-6 sm:w-6 mx-auto mb-1 sm:mb-2 text-lottery-gold" />
                  <div className="text-sm sm:text-xl font-bold text-slate-900">{formatPrizeValue(lottery.prizeValue)}</div>
                  <div className="text-sm text-slate-600">Prize Value</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-travel-coral/10 to-lottery-purple/10 rounded-lg">
                  <Calendar className="h-6 w-6 mx-auto mb-2 text-travel-coral" />
                  <div className="text-xl font-bold text-slate-900">{daysUntilDraw}</div>
                  <div className="text-sm text-slate-600">Days Left</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-adventure-teal/10 to-ocean-pulse/10 rounded-lg">
                  <Users className="h-6 w-6 mx-auto mb-2 text-adventure-teal" />
                  <div className="text-xl font-bold text-slate-900">{lottery.soldTickets}</div>
                  <div className="text-sm text-slate-600">Tickets Sold</div>
                </div>
                <div className="text-center p-4 bg-gradient-to-br from-lottery-purple/10 to-travel-coral/10 rounded-lg">
                  <Coins className="h-6 w-6 mx-auto mb-2 text-lottery-purple" />
                  <div className="text-xl font-bold text-slate-900">{lottery.ticketPrice}</div>
                  <div className="text-sm text-slate-600">Tokens/Ticket</div>
                </div>
              </div>
            </div>
            
            <div className="relative h-64 lg:h-full rounded-xl overflow-hidden shadow-xl">
              <TravelImageRenderer 
                type="lottery" 
                theme={lottery.theme} 
                className="w-full h-full object-cover" 
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
              <div className="absolute bottom-4 left-4 text-white">
                <h3 className="font-bold text-xl mb-2">{lottery.prizeTitle}</h3>
                <p className="text-sm opacity-90">{lottery.prizeDescription}</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="max-w-6xl mx-auto p-2 sm:p-4 space-y-4 sm:space-y-8">
        {/* Token Balance & Wallet Integration */}
        <div className="flex justify-center">
          <Card className="w-full max-w-2xl">
            <CardContent className="pt-3 sm:pt-6">
              <div className="grid sm:grid-cols-2 gap-3 sm:gap-6">
                <div>
                  <h3 className="text-lg font-semibold mb-4">Your Tokens</h3>
                  <KairosTokenBalance variant="detailed" showConvertButton={true} />
                  {user && lottery && (
                    <div className="mt-4 p-3 bg-slate-50 rounded-lg">
                      <div className="flex items-center justify-between text-sm">
                        <span className="text-slate-600">Ticket Cost:</span>
                        <span className="font-semibold">{lottery.ticketPrice} Kairos</span>
                      </div>
                      <div className="flex items-center justify-between text-sm mt-1">
                        <span className="text-slate-600">Can Buy:</span>
                        <span className="font-semibold text-green-600">
                          {Math.floor((user.kairosTokens || 0) / lottery.ticketPrice)} tickets
                        </span>
                      </div>
                    </div>
                  )}
                </div>
                
                <div>
                  <h3 className="text-lg font-semibold mb-4">Wallet Connection</h3>
                  <WalletConnector onWalletChange={(address) => {
                    console.log('Wallet connected:', address);
                  }} />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
        
        {/* Number Selection */}
        <LotteryNumberSelector
          onNumbersSelected={(numbers: number[]) => {
            // Only add to cart when explicitly called from the "Add to Cart" button
            handleAddToCart(numbers, false);
          }}
          maxNumbers={6}
          numberRange={{ min: 1, max: 49 }}
        />

        {/* Quick Actions */}
        <Card className="max-w-2xl mx-auto">
          <CardHeader className="pb-3 sm:pb-6">
            <CardTitle className="text-center text-base sm:text-lg">Quick Purchase Options</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid sm:grid-cols-2 gap-3 sm:gap-6">
              {/* Single Quick Pick */}
              <div className="text-center space-y-2 sm:space-y-3">
                <h3 className="font-medium text-sm sm:text-base">Single Random Ticket</h3>
                <Button 
                  onClick={() => {
                    const randomNumbers: number[] = [];
                    while (randomNumbers.length < 6) {
                      const randomNum = Math.floor(Math.random() * 49) + 1;
                      if (!randomNumbers.includes(randomNum)) {
                        randomNumbers.push(randomNum);
                      }
                    }
                    handleAddToCart(randomNumbers.sort((a, b) => a - b), true);
                  }}
                  variant="outline"
                  className="w-full flex items-center gap-1 sm:gap-2 text-xs sm:text-sm"
                  size="sm"
                >
                  <Shuffle className="w-3 h-3 sm:w-4 sm:h-4" />
                  Quick Pick 1 Ticket
                </Button>
              </div>

              {/* Multiple Tickets Selector */}
              <div className="text-center space-y-2 sm:space-y-3">
                <h3 className="font-medium text-sm sm:text-base">Multiple Random Tickets</h3>
                <div className="text-xs sm:text-sm text-slate-600 mb-1 sm:mb-2">
                  Click to add tickets one by one
                </div>
                <Button 
                  onClick={() => {
                    const randomNumbers: number[] = [];
                    while (randomNumbers.length < 6) {
                      const randomNum = Math.floor(Math.random() * 49) + 1;
                      if (!randomNumbers.includes(randomNum)) {
                        randomNumbers.push(randomNum);
                      }
                    }
                    handleAddToCart(randomNumbers.sort((a, b) => a - b), true);
                  }}
                  variant="outline"
                  className="w-full flex items-center gap-1 sm:gap-2 text-xs sm:text-sm"
                  size="sm"
                >
                  <Shuffle className="w-3 h-3 sm:w-4 sm:h-4" />
                  Add 1 More Random Ticket
                </Button>
                <div className="text-xs text-slate-500">
                  Each click adds another random ticket to your cart
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Shopping Cart */}
        {ticketCart.length > 0 && (
          <Card>
            <CardHeader className="pb-3 sm:pb-6">
              <CardTitle className="flex items-center justify-between flex-col sm:flex-row gap-2 sm:gap-0">
                <div className="flex items-center gap-2">
                  <Trophy className="h-4 w-4 sm:h-5 sm:w-5 text-blue-600" />
                  <span className="text-sm sm:text-base">Your Tickets ({ticketCart.length})</span>
                </div>
                <Button 
                  variant="outline" 
                  size="sm"
                  onClick={() => setTicketCart([])}
                  className="text-red-600 hover:text-red-700"
                >
                  Clear All
                </Button>
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2 sm:space-y-3 mb-4 sm:mb-6">
                {ticketCart.map((ticket, index) => (
                  <div key={index} className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-2 sm:gap-3 p-2 sm:p-3 bg-slate-50 rounded-lg">
                    <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3">
                      <div className="text-xs sm:text-sm font-medium">Ticket #{index + 1}:</div>
                      <div className="flex gap-1 flex-wrap">
                        {ticket.selectedNumbers.map((num) => (
                          <Badge key={num} className="bg-blue-600 text-white text-xs">
                            {num}
                          </Badge>
                        ))}
                      </div>
                      {ticket.isAutoGenerated && (
                        <Badge variant="secondary" className="text-xs">Quick Pick</Badge>
                      )}
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeFromCart(index)}
                      className="text-red-600 hover:text-red-700 self-end sm:self-auto text-xs"
                    >
                      Remove
                    </Button>
                  </div>
                ))}
              </div>
              
              <div className="border-t pt-3 sm:pt-4">
                <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3 sm:gap-4 mb-3 sm:mb-4">
                  <div>
                    <div className="text-base sm:text-lg font-semibold">Total: {totalCost} Kairos</div>
                    <div className="text-xs sm:text-sm text-slate-600">
                      {ticketCart.length} ticket{ticketCart.length > 1 ? 's' : ''}
                    </div>
                  </div>
                  <div className="text-left sm:text-right text-xs sm:text-sm text-slate-600">
                    <div>Your Balance: {user?.kairosTokens || 0} Kairos</div>
                    <div>After Purchase: {(user?.kairosTokens || 0) - totalCost} Kairos</div>
                  </div>
                </div>
                
                {!canAfford && (
                  <Link href="/token-shop">
                    <Button variant="outline" className="w-full mb-3">
                      Buy More Tokens
                    </Button>
                  </Link>
                )}
                
                <motion.div
                  whileHover={{ scale: 1.02 }}
                  whileTap={{ scale: 0.98 }}
                  className="w-full"
                >
                  <Button
                    onClick={buyTickets}
                    disabled={!canAfford || buyingTickets}
                    className={`w-full ${
                      buyingTickets 
                        ? "bg-amber-500 hover:bg-amber-600" 
                        : !canAfford 
                        ? "bg-gray-400 hover:bg-gray-500" 
                        : "bg-gradient-to-r from-emerald-600 to-teal-600 hover:from-emerald-700 hover:to-teal-700"
                    } text-white font-bold shadow-lg transition-all duration-300`}
                    size="lg"
                    data-testid="buy-tickets-button"
                  >
                    <div className="flex items-center justify-center gap-3">
                      {buyingTickets ? (
                        <>
                          <motion.div
                            animate={{ rotate: 360 }}
                            transition={{ duration: 1, repeat: Infinity, ease: "linear" }}
                          >
                            <Sparkles className="w-5 h-5" />
                          </motion.div>
                          <span>Procesando Compra...</span>
                        </>
                      ) : !canAfford ? (
                        <>
                          <Coins className="w-5 h-5" />
                          <span>Tokens Insuficientes</span>
                        </>
                      ) : (
                        <>
                          <motion.div
                            animate={{ 
                              scale: [1, 1.1, 1],
                              rotate: [0, 5, -5, 0]
                            }}
                            transition={{ 
                              duration: 2, 
                              repeat: Infinity,
                              repeatType: "reverse" 
                            }}
                          >
                            <Trophy className="w-5 h-5" />
                          </motion.div>
                          <span>¡Comprar {ticketCart.length} Ticket{ticketCart.length > 1 ? 's' : ''}!</span>
                          <div className="flex items-center gap-1">
                            <Coins className="w-4 h-4" />
                            <span className="text-sm">{totalCost}</span>
                          </div>
                        </>
                      )}
                    </div>
                  </Button>
                </motion.div>
                
                {!canAfford && (
                  <p className="text-sm text-red-600 mt-2 text-center">
                    You need {totalCost - (user?.kairosTokens || 0)} more Kairos tokens to purchase these tickets.
                  </p>
                )}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Prize Details */}
        <Card>
          <CardHeader>
            <CardTitle>Prize Details</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-2">What You'll Win</h3>
                <p className="text-slate-600 mb-4">{lottery.prizeDescription}</p>
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-sm">
                    <MapPin className="h-4 w-4 text-slate-500" />
                    <span>Destination theme: {lottery.theme}</span>
                  </div>
                  <div className="flex items-center gap-2 text-sm">
                    <Clock className="h-4 w-4 text-slate-500" />
                    <span>Draw date: {new Date(lottery.drawDate).toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
              <div>
                <h3 className="font-semibold mb-2">How to Play</h3>
                <ul className="text-sm text-slate-600 space-y-1">
                  <li>• Select 6 numbers from 1 to 49</li>
                  <li>• Each ticket costs {lottery.ticketPrice} tokens</li>
                  <li>• Match all numbers to win the grand prize</li>
                  <li>• Draw takes place on {new Date(lottery.drawDate).toLocaleDateString()}</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Animated Purchase Success/Processing Modal */}
        <AnimatePresence>
          {purchaseState === 'processing' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4"
            >
              <motion.div
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                exit={{ scale: 0.8, opacity: 0 }}
                className="bg-white rounded-2xl p-4 sm:p-8 max-w-sm sm:max-w-md w-full text-center"
              >
                <motion.div
                  animate={{ rotate: 360 }}
                  transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                  className="w-12 h-12 sm:w-16 sm:h-16 mx-auto mb-4 sm:mb-6"
                >
                  <Sparkles className="w-full h-full text-amber-500" />
                </motion.div>
                <h3 className="text-lg sm:text-2xl font-bold text-gray-900 mb-2">Procesando Compra</h3>
                <p className="text-sm sm:text-base text-gray-600 mb-3 sm:mb-4">Comprando tus tickets de la suerte...</p>
                <div className="flex justify-center space-x-1">
                  {[0, 1, 2].map((i) => (
                    <motion.div
                      key={i}
                      animate={{ scale: [1, 1.2, 1] }}
                      transition={{ duration: 1, repeat: Infinity, delay: i * 0.2 }}
                      className="w-3 h-3 bg-amber-500 rounded-full"
                    />
                  ))}
                </div>
              </motion.div>
            </motion.div>
          )}

          {purchaseState === 'success' && (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/60 flex items-center justify-center z-50 p-4"
            >
              <motion.div
                initial={{ scale: 0.8, y: 50, opacity: 0 }}
                animate={{ scale: 1, y: 0, opacity: 1 }}
                exit={{ scale: 0.8, y: 50, opacity: 0 }}
                transition={{ type: "spring", duration: 0.6 }}
                className="bg-gradient-to-br from-emerald-50 to-teal-50 rounded-2xl p-4 sm:p-8 max-w-sm sm:max-w-md w-full text-center border-2 border-emerald-200 relative overflow-hidden"
              >
                {/* Background Animation */}
                <div className="absolute inset-0 bg-gradient-to-r from-emerald-400/10 to-teal-400/10">
                  {showConfetti && [...Array(20)].map((_, i) => (
                    <motion.div
                      key={i}
                      initial={{ y: -20, x: Math.random() * 400, rotate: 0 }}
                      animate={{ 
                        y: 500, 
                        x: Math.random() * 400, 
                        rotate: Math.random() * 360 
                      }}
                      transition={{ duration: 3, delay: Math.random() * 2 }}
                      className="absolute w-3 h-3 bg-gradient-to-r from-amber-400 to-orange-500 rounded-full"
                    />
                  ))}
                </div>

                {/* Success Icon */}
                <motion.div
                  initial={{ scale: 0, rotate: -180 }}
                  animate={{ scale: 1, rotate: 0 }}
                  transition={{ delay: 0.2, type: "spring", duration: 0.8 }}
                  className="w-20 h-20 mx-auto mb-6 bg-emerald-500 rounded-full flex items-center justify-center relative"
                >
                  <Check className="w-10 h-10 text-white" />
                  <motion.div
                    animate={{ scale: [1, 1.3, 1] }}
                    transition={{ duration: 2, repeat: Infinity }}
                    className="absolute inset-0 bg-emerald-500 rounded-full opacity-30"
                  />
                </motion.div>

                <motion.h3
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.4 }}
                  className="text-xl sm:text-3xl font-bold text-emerald-800 mb-2"
                >
                  ¡Compra Exitosa!
                </motion.h3>

                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.6 }}
                  className="space-y-2 sm:space-y-3 mb-4 sm:mb-6"
                >
                  <div className="flex items-center justify-center gap-2 text-emerald-700">
                    <Gift className="w-4 h-4 sm:w-5 sm:h-5" />
                    <span className="font-semibold text-sm sm:text-base">{purchaseResults.completedTickets} Tickets Comprados</span>
                  </div>
                  <div className="flex items-center justify-center gap-2 text-emerald-600">
                    <Coins className="w-4 h-4 sm:w-5 sm:h-5" />
                    <span className="text-sm sm:text-base">{purchaseResults.totalCost} Kairos Tokens Gastados</span>
                  </div>
                  <motion.p
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    transition={{ delay: 0.8 }}
                    className="text-emerald-600 text-xs sm:text-sm"
                  >
                    ¡Tus números de la suerte están listos para el sorteo!
                  </motion.p>
                </motion.div>

                <motion.div
                  initial={{ opacity: 0, scale: 0.8 }}
                  animate={{ opacity: 1, scale: 1 }}
                  transition={{ delay: 1 }}
                  className="flex justify-center gap-3"
                >
                  <Button
                    onClick={() => setPurchaseState('idle')}
                    className="bg-emerald-600 hover:bg-emerald-700 text-white px-4 sm:px-6 text-sm sm:text-base"
                    size="sm"
                  >
                    <Star className="w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2" />
                    ¡Continuar!
                  </Button>
                </motion.div>

                {/* Sparkle Effects */}
                {[...Array(6)].map((_, i) => (
                  <motion.div
                    key={`sparkle-${i}`}
                    initial={{ scale: 0, opacity: 0 }}
                    animate={{ 
                      scale: [0, 1, 0], 
                      opacity: [0, 1, 0],
                      rotate: [0, 180, 360] 
                    }}
                    transition={{ 
                      duration: 2, 
                      repeat: Infinity, 
                      delay: i * 0.3,
                      repeatDelay: 1 
                    }}
                    className={`absolute w-4 h-4 ${
                      i % 3 === 0 ? 'text-amber-400' : 
                      i % 3 === 1 ? 'text-emerald-400' : 'text-teal-400'
                    }`}
                    style={{
                      top: `${20 + (i * 15)}%`,
                      left: `${10 + (i * 15)}%`,
                    }}
                  >
                    <Zap className="w-full h-full" />
                  </motion.div>
                ))}
              </motion.div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>
    </div>
  );
}