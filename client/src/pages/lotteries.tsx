import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Link } from "wouter";
import { type Lottery, type User } from "@shared/schema";
import { queryClient, apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";

import { 
  Trophy, Clock, Users, Ticket, Coins, Calendar, MapPin, Copy, 
  Plane, Star, Target, Gift, ArrowRight, Timer, DollarSign
} from "lucide-react";
import MobileNavigation from "@/components/mobile-navigation";
import NavigationDropdown from "@/components/navigation-dropdown";
import ProfileDropdown from "@/components/profile-dropdown";
import LanguageSelector from "@/components/language-selector";
import TravelImageRenderer from "@/components/travel-image-renderer";
import { useLanguage } from "@/lib/i18n";

const SAMPLE_USER_ID = "sample-user";

export default function Lotteries() {
  const { toast } = useToast();
  const { t } = useLanguage();


  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: "Copied!",
        description: `${label} copied to clipboard`,
      })
    }).catch(() => {
      toast({
        title: "Copy failed",
        description: "Please copy manually",
        variant: "destructive"
      })
    })
  }

  const { data: user } = useQuery<User>({
    queryKey: ["/api/users", SAMPLE_USER_ID],
  });

  const { data: lotteries = [], isLoading } = useQuery<Lottery[]>({
    queryKey: ["/api/lotteries"],
  });

  const [isProcessing, setIsProcessing] = useState(false);

  const handleBuyTicket = async (lottery: Lottery) => {
    if (isProcessing) return;
    
    setIsProcessing(true);
    
    try {
      // Check user has enough tokens
      if (!user || (user.kairosTokens || 0) < lottery.ticketPrice) {
        toast({
          title: "Tokens insuficientes",
          description: `Necesitas ${lottery.ticketPrice} tokens Kairos. Tienes ${user?.kairosTokens || 0}`,
          variant: "destructive",
        });
        return;
      }
      
      // Generate random numbers for lottery ticket
      const selectedNumbers = Array.from({ length: 6 }, () => 
        Math.floor(Math.random() * 49) + 1
      ).map(String);
      
      // Create ticket data
      const ticketData = {
        lotteryId: lottery.id,
        userId: SAMPLE_USER_ID,
        ticketNumber: lottery.soldTickets + 1,
        selectedNumbers,
        isAutoGenerated: true
      };

      console.log("Purchasing ticket with data:", ticketData);
      
      // Make API call using apiRequest
      const ticket = await apiRequest("/api/lottery-tickets", {
        method: "POST",
        body: ticketData
      });
      
      // Success - update UI
      toast({
        title: "¬°Ticket comprado!",
        description: `Ticket #${ticket.ticketNumber} con n√∫meros ${selectedNumbers.join(", ")}`,
      });
      
      // Refresh data
      queryClient.invalidateQueries({ queryKey: ["/api/lotteries"] });
      queryClient.invalidateQueries({ queryKey: ["/api/users", SAMPLE_USER_ID] });
      
    } catch (error: any) {
      console.error("Purchase error:", error);
      toast({
        title: "Error en la compra",
        description: error?.message || "No se pudo comprar el ticket. Intenta de nuevo.",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };



  const formatTimeRemaining = (drawDate: Date) => {
    const now = new Date();
    const diff = new Date(drawDate).getTime() - now.getTime();
    
    if (diff <= 0) return "Draw completed";
    
    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    if (days > 0) return `${days}d ${hours}h remaining`;
    if (hours > 0) return `${hours}h ${minutes}m remaining`;
    return `${minutes}m remaining`;
  };

  const formatPrizeValue = (value: number) => {
    // Format as $USD with maximum 5 digits
    if (value >= 100000) {
      // Values 100K+ shown as whole thousands (e.g., $USD 125)
      return `$USD ${Math.floor(value / 1000)}`;
    } else {
      // Values under 100K shown with commas (e.g., $USD 1,250)
      return `$USD ${value.toLocaleString()}`;
    }
  };

  const getLotteryTheme = (lotteryId: string) => {
    if (lotteryId.includes('bali')) return {
      bg: 'from-orange-50 to-red-50',
      border: 'border-orange-200',
      text: 'text-orange-700',
      icon: 'üèùÔ∏è',
      destination: 'tropical'
    };
    if (lotteryId.includes('patagonia')) return {
      bg: 'from-blue-50 to-cyan-50',
      border: 'border-blue-200',
      text: 'text-blue-700',
      icon: 'üèîÔ∏è',
      destination: 'adventure'
    };
    if (lotteryId.includes('morocco')) return {
      bg: 'from-amber-50 to-yellow-50',
      border: 'border-amber-200',
      text: 'text-amber-700',
      icon: 'üèúÔ∏è',
      destination: 'cultural'
    };
    return {
      bg: 'from-purple-50 to-pink-50',
      border: 'border-purple-200',
      text: 'text-purple-700',
      icon: '‚úàÔ∏è',
      destination: 'cultural'
    };
  };

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-slate-600">Loading travel lotteries...</p>
        </div>
      </div>
    );
  }

  const activeLotteries = lotteries.filter(l => new Date(l.drawDate) > new Date());
  const completedLotteries = lotteries.filter(l => new Date(l.drawDate) <= new Date());

  return (
    <div className="min-h-screen bg-silk-surface">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-slate-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Link href="/">
              <div className="text-xl sm:text-2xl font-bold text-explore-blue" data-testid="logo">
                ‚úàÔ∏è VoyageLotto
              </div>
            </Link>
            
            <nav className="hidden lg:flex space-x-6">
              <Link href="/dashboard">
                <Button variant="ghost" data-testid="nav-dashboard">Dashboard</Button>
              </Link>
              <Link href="/lotteries">
                <Button variant="ghost" className="text-blue-600 font-medium" data-testid="nav-lotteries">
                  Lotteries
                </Button>
              </Link>
              <Link href="/token-management">
                <Button variant="ghost" data-testid="nav-tokens">Token Management</Button>
              </Link>
              <Link href="/marketplace">
                <Button variant="ghost" data-testid="nav-marketplace">Marketplace</Button>
              </Link>
              <Link href="/profile">
                <Button variant="ghost" data-testid="nav-profile">Profile</Button>
              </Link>
            </nav>

            <div className="flex items-center space-x-4">
              <NavigationDropdown currentPath="/lotteries" />
              <LanguageSelector />
              <ProfileDropdown />
              <MobileNavigation currentPath="/lotteries" />
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header Section */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üé´ Travel Lotteries
          </h1>
          <p className="text-lg text-gray-600 max-w-3xl mx-auto">
            Win incredible travel experiences around the world! Use your Kairos tokens to enter exclusive lotteries for luxury vacations and adventures.
          </p>
        </div>

        {/* User Token Balance */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-yellow-100 rounded-lg">
                <Coins className="h-6 w-6 text-yellow-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600">Viator Tokens</p>
                <p className="text-2xl font-bold text-yellow-600">{user?.viatorTokens || "0.00"}</p>
              </div>
            </div>
            
            <div className="flex items-center space-x-4">
              <div className="p-3 bg-purple-100 rounded-lg">
                <Target className="h-6 w-6 text-purple-600" />
              </div>
              <div>
                <p className="text-sm font-medium text-gray-600">Kairos Tokens</p>
                <p className="text-2xl font-bold text-purple-600">{user?.kairosTokens || 0}</p>
                <p className="text-sm text-gray-500">Available for lottery entries</p>
              </div>
            </div>
            
            <div className="flex items-center justify-center">
              <Link href="/token-management">
                <Button className="w-full" data-testid="buy-tokens-button">
                  <Coins className="h-4 w-4 mr-2" />
                  Buy More Tokens
                </Button>
              </Link>
            </div>
          </div>
        </div>

        {/* Active Lotteries Section */}
        <div className="mb-12">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-2xl font-bold text-gray-900">Active Lotteries</h2>
            <Badge variant="secondary" className="text-lg px-3 py-1">
              {activeLotteries.length} Active
            </Badge>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
            {activeLotteries.map((lottery) => {
              const theme = getLotteryTheme(lottery.id);
              const timeRemaining = formatTimeRemaining(new Date(lottery.drawDate));
              const userCanAfford = (user?.kairosTokens || 0) >= lottery.ticketPrice;
              
              return (
                <Card key={lottery.id} className={`${theme.border} bg-white hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1 overflow-hidden`}>
                  <div className="relative h-48 rounded-t-lg overflow-hidden">
                    <TravelImageRenderer 
                      type="lottery" 
                      theme={theme.destination}
                      className="w-full h-full object-cover"
                    />
                    <div className="absolute inset-0 bg-gradient-to-t from-black/60 via-transparent to-transparent"></div>
                    <div className="absolute top-4 left-4 text-white text-3xl">
                      {theme.icon}
                    </div>
                    <Badge className="absolute top-4 right-4 bg-white/90 text-slate-700">
                      {lottery.drawDate ? `Draw: ${new Date(lottery.drawDate).toLocaleDateString()}` : 'No Draw Date'}
                    </Badge>
                    <div className="absolute bottom-4 left-4 text-white">
                      <h3 className="text-xl font-bold">{lottery.title}</h3>
                      <Badge variant="secondary" className="mt-1 bg-white/20 text-white border-white/30">
                        {lottery.lotteryCode || lottery.id}
                      </Badge>
                    </div>
                  </div>
                  <CardHeader className="pb-4">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <CardDescription className="text-gray-700 mt-2">
                          {lottery.description}
                        </CardDescription>
                      </div>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyToClipboard(lottery.lotteryCode || lottery.id, "Lottery ID")}
                        className="h-8 w-8 p-0"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </CardHeader>
                  
                  <CardContent className="space-y-4">
                    {/* Prize Value - Prominent Display */}
                    <div className="text-center p-4 bg-gradient-to-r from-yellow-50 to-orange-50 rounded-lg border-2 border-yellow-200">
                      <div className="flex items-center justify-center space-x-2 mb-2">
                        <Trophy className="h-6 w-6 text-yellow-600" />
                        <span className="text-lg font-semibold text-yellow-700">Grand Prize</span>
                      </div>
                      <div className="text-3xl font-bold text-green-600">
                        {formatPrizeValue(lottery.prizeValue)}
                      </div>
                    </div>

                    {/* Quick Stats Grid */}
                    <div className="grid grid-cols-2 gap-3 text-sm">
                      <div className="text-center p-3 bg-purple-50 rounded-lg">
                        <div className="flex items-center justify-center space-x-1 mb-1">
                          <Target className="h-4 w-4 text-purple-600" />
                          <span className="font-medium text-purple-700">Entry Cost</span>
                        </div>
                        <div className="text-lg font-bold text-purple-600">
                          {lottery.ticketPrice} Kairos
                        </div>
                      </div>
                      <div className="text-center p-3 bg-blue-50 rounded-lg">
                        <div className="flex items-center justify-center space-x-1 mb-1">
                          <Timer className="h-4 w-4 text-blue-600" />
                          <span className="font-medium text-blue-700">Time Left</span>
                        </div>
                        <div className="text-lg font-bold text-blue-600">
                          {timeRemaining}
                        </div>
                      </div>
                    </div>

                    {/* Ticket Statistics */}
                    <div className="bg-slate-50 p-3 rounded-lg text-sm space-y-2">
                      <div className="flex justify-between">
                        <span className="text-slate-600">Draw Date:</span>
                        <span className="font-medium">{new Date(lottery.drawDate).toLocaleDateString()}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-600">Tickets Sold:</span>
                        <span className="font-medium">{lottery.soldTickets}/{lottery.maxTickets}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-slate-600">Days Remaining:</span>
                        <span className="font-medium text-blue-600">
                          {Math.ceil((new Date(lottery.drawDate).getTime() - Date.now()) / (1000 * 60 * 60 * 24))} days
                        </span>
                      </div>
                    </div>

                    {/* Entry Button */}
                    <Button 
                      className="w-full mt-4" 
                      disabled={!userCanAfford || isProcessing}
                      onClick={() => handleBuyTicket(lottery)}
                      data-testid={`enter-lottery-${lottery.id}`}
                      size="lg"
                    >
                      {!userCanAfford ? (
                        <>
                          <Coins className="h-4 w-4 mr-2" />
                          Need More Kairos
                        </>
                      ) : isProcessing ? (
                        "Processing..."
                      ) : (
                        <>
                          <Ticket className="h-4 w-4 mr-2" />
                          Buy Ticket ({lottery.ticketPrice} Kairos)
                        </>
                      )}
                    </Button>
                  </CardContent>
                </Card>
              );
            })}
          </div>
        </div>

        {/* Completed Lotteries Section */}
        {completedLotteries.length > 0 && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-900">Recent Results</h2>
              <Badge variant="outline" className="text-lg px-3 py-1">
                {completedLotteries.length} Completed
              </Badge>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {completedLotteries.slice(0, 6).map((lottery) => {
                const theme = getLotteryTheme(lottery.id);
                
                return (
                  <Card key={lottery.id} className={`${theme.border} bg-gradient-to-br ${theme.bg} opacity-75`}>
                    <CardHeader className="pb-4">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center space-x-2">
                          <span className="text-2xl grayscale">{theme.icon}</span>
                          <div>
                            <CardTitle className={`text-xl ${theme.text}`}>
                              {lottery.title}
                            </CardTitle>
                            <Badge variant="secondary" className="mt-1">
                              Completed
                            </Badge>
                          </div>
                        </div>
                      </div>
                    </CardHeader>
                    
                    <CardContent>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span>Prize Value:</span>
                          <span className="font-semibold">{formatPrizeValue(lottery.prizeValue)}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>Draw Date:</span>
                          <span>{new Date(lottery.drawDate).toLocaleDateString()}</span>
                        </div>
                      </div>
                      
                      <Link href={`/lottery/${lottery.id}`}>
                        <Button variant="outline" className="w-full mt-4" size="sm">
                          View Results
                        </Button>
                      </Link>
                    </CardContent>
                  </Card>
                );
              })}
            </div>
          </div>
        )}

        {/* Empty State */}
        {lotteries.length === 0 && (
          <div className="text-center py-12">
            <Plane className="h-16 w-16 text-gray-400 mx-auto mb-4" />
            <h3 className="text-xl font-semibold text-gray-900 mb-2">No Lotteries Available</h3>
            <p className="text-gray-600 mb-6">
              Check back soon for exciting travel lottery opportunities!
            </p>
            <Link href="/dashboard">
              <Button data-testid="back-to-dashboard">
                Return to Dashboard
              </Button>
            </Link>
          </div>
        )}
      </main>
    </div>
  );
}